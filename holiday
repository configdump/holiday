#!/usr/bin/env python
'''
    Purpose : Display holidays
    Author  : Bharath Shetty
    Created : 16/03/2022
'''

import sys
import argparse
import datetime
import requests

parser = argparse.ArgumentParser(description="Holidays")
parser.add_argument('-c', '--code', help="Country Code(ISO)", type=str.upper, default="DE")
parser.add_argument('-y', '--year', help="Year", default=datetime.datetime.now().year)
parser.add_argument('-s', '--state', help="State", type=str.upper)
args = parser.parse_args()

class Holiday:
    """ Holiday """
    def __init__(self, arg):
        """ Holiday"""
        self.year = arg.year
        self.country = arg.code
        self.state = arg.state
        self.url = f'https://date.nager.at/api/v3/publicholidays/{self.year}/{self.country}'

    def api_getter(self):
        """ Holiday getter"""
        response = requests.get(self.url)
        if response.status_code == 200:
            return response.json()
        print("API Request Failed !!!")
        sys.exit(127)

    def get_states(self, record):
        """ Get States"""
        if record['global']:
            return ["All"]
        return  [elem.replace(f'{self.country}-', '') for elem in record['counties']]

    def run(self):
        """ Run"""
        records = self.api_getter()
        print("-" * 100)
        print(f'{"Date":12}{"Local Name":30}{"Name":30}{"States":30}')
        print("-" * 100)
        for record in records:
            states = self.get_states(record)
            if self.state and ("All" in states or self.state in states):
                print(f'{record["date"]:12}{record["localName"]:30}\
{record["name"]:30}{",".join(states):30}')
            elif not self.state:
                print(f'{record["date"]:12}{record["localName"]:30}\
{record["name"]:30}{",".join(states):30}')
        print("-" * 100)

if __name__ == "__main__":
    Holiday(args).run()
